#summary How to build Turtle Arena on Linux
#labels Phase-Deploy

You first need to get the source code as described [BuildingSource here].

= Introduction =

The development of Turtle Arena is done on Ubuntu Linux. Some things, like packaging for release, are only supported on Linux.

= Getting the Libraries =

You will need the following development libraries; SDL, GL, GLU, Ogg, Vorbis, and Theora.

In Ubuntu (and possibly Debian and other Debian based distributions) you can run the below in the terminal to install all of the needed libraries.

    sudo apt-get install libsdl1.2-dev libgl1-mesa-dev libglu1-mesa-dev libogg-dev libvorbis-dev libtheora-dev

= Compiling =
There are two options for compiling Turtle Arena on Linux; make and Code::Blocks. However, using make is the best option.

== Make ==
  # In a terminal change to the Turtle Arena engine directory and run "make"
  # Output will be in engine/build/dir/ (Where dir is something like "release-linux-i386")

== Code::Blocks ==
Using Code::Block for compiling is not recommenced as it is often out dated from the Makefile (used by "make"), but should be up-to-date for stable releases. It creates the game binary and game logic '.so' files, but not the cross-platform game logic '.qvm' files.

  # Open engine/misc/code_blocks/ioq3.workspace
  # Select Platform
  # Rebuild workspace
  # Output will be in engine/build/

== Launching the game ==

=== Using a existing installation (Recommended for stable releases) ===
If you have Turtle Arena install and wish to uses your newly compiled code;

  # Copy (or link) the game binary (i.e. turtlearena.i386) to path-where-Turtle-Arena-is-installed (you should rename it so it doesn't replace the original)
  # Copy (or link) the game logic '.so' files to path-where-Turtle-Arena-is-installed/base (If there are already '.so' files in base you may want to move them instead of replacing them)
  # Run your new game binary, './your-renamed-turtlearena.i386 +set sv_pure 0 +set vm_game 0 +set vm_cgame 0 +set vm_ui 0'
    * Setting sv_pure to 0 allows the use of files not in a pk3.
    * Setting vm_game/vm_cgame/vm_ui to 0 tells the game to use the '.so' files.

Note: By using links you will not have to copy the files after each time you compile the source code.

=== Using without a existing installation ===
If you did a checkout from subversion you have all of the data needed to run the game, so you do not need a existing install of Turtle Arena.

If you checked out a stable release, you will not be able to play multiplayer on pure servers as they require zipped assets (base/assets0.pk3) with a specific checksum.

==== Make ====
  # Create a link to each of the 3 .qvm files in `engine/build/release-*/base/vm/*.qvm` in base/vm/ This way you don't have to copy the qvms after each compile.

OR Copy the qvms files instead, to allow them to be used in Windows as well.

  # In the terminal change to the directory where you did the checkout. Example: cd /home/$USER/!TurtleArena/svn/

  # Run in the terminal; (Example) ./engine/build/release-linux-i386/turtlearena.i386 +set fs_basepath "."

==== Code::Blocks ====
Code::Blocks does not build the game logic '.qvm', only the game logic '.so'. So it is slightly different from the instructions for "Make"

  # Create a link to each of the 3 .so files in `engine/build/release-*/base/*.so` in base/ This way you don't have to copy the .so files after each compile.

  # In the terminal change to the directory where you did the checkout. Example: cd /home/$USER/!TurtleArena/svn/

  # Run in the terminal; (Example) ./engine/build/release-linux-i386/turtlearena.i386 +set fs_basepath "." +set vm_game 0 +set vm_cgame 0 +set vm_ui 0
    * Setting vm_game/vm_cgame/vm_ui to 0 tells the game to use the '.so' files.

==== Allowing sv_pure to be enabled ====
===== Stable release =====
To allow sv_pure to be enable you should download the assets0.pk3 included with the stable release. You could try zipping it yourself but it is likely that the checksum will be different.

If you want to try it anyway, run the package-assets.sh script.
  # ./package-assets.sh
  # Copy assets0.pk3 from ./install/base to ./base

===== Development release =====
For the development release you need to create assets0.pk3, but also set the checksum in the engine.

The script package.sh has a helper function for setting the checksum, but currently must be manually done.
  # ./package.sh --no-win32 --no-linux
  # Copy assets0.pk3 from ./install/base to ./base